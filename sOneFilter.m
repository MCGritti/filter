function varargout = sOneFilter(U, y0, sigma, varargin)

  N = size(U, 1);
  
  if isempty(y0)
    initindex = 2;
  else
    if isrow(y0)
      y0 = y0';
    end
    initindex = length(y0) + 1;
  end
  partialindex = 80;
  
  Ys = zeros(N, 1);
  Y  = zeros(N, 1);
  
  if length(sigma) ~= length(Ys)
    E  = sigma*randn(N, 1);
  else
	E  = sigma;
  end
	
  if nargin > 3
	osa = true;
	Ys  = varargin{1};
	Y   = Ys;
  else
	osa = false;
	Ys(1:length(y0)) = y0;
	Y = Ys;
  end
  
  
  theta    = [+0.217356452508788600
				+0.163169322181723642
				+0.126792365278330349
				+0.083370135427878217
				+0.092265347838894354
				+0.056700406899186775
				+0.058301929047571734
				+0.046334343938633143
				+0.044338399461070377
				+0.018965859240969069
				+0.015351510423438498
				+0.013257254767352827
				+0.027301863257034969
				+0.028026873713635457
				+0.038013837901469824
				+0.037999990908711603
				+0.058251108876987083
				+0.040216556779997262
				+0.023216383107121989
				+0.009414221597100217
				-0.005664442370585720
				-0.019726804939201991
				-0.019345515053074129
				-0.020726983646192826
				-0.048547500916224118
				-0.061875038021131867
				-0.052861338721283874
				-0.010020184489341971
				+0.007774200466789307
				-0.008143730397076028
				-0.002905195502933084
				+0.016043769790425814
				-0.003872583480724298
				+0.000421526420209039
				+0.011150125985630081
				+0.013641384705599974
				-0.007433432103220272
				-0.008696375881501208
				-0.006053565389321688
				+0.015419454769194907
				+0.008863630346976573
				+0.017721595893636834
				+0.005002189380695100
				+0.005237010369068548
				-0.003697473736392151
				+0.012312184147753251
				-0.006919246080699844
				-0.010661307545776971
				-0.014618489377623778
				+0.001493735906093540
				+0.016425214057059077
				+0.002566855395918795
				-0.006495310596995348
				-0.015135439449276738
				-0.004878530919013187
				+0.005223311317008245
				+0.001084629898861347
				-0.011475796515991003
				-0.007261267461559588
				-0.005816720512490293
				-0.013746244477559599
				-0.008917740469569493
				+0.002896674680464039
				+0.006485434022683294
				+0.010137711802557856
				+0.013904773465292491
				+0.012015381320319573
				+0.012164807835563776
				+0.011191953423183416
				+0.006188967475637182
				+0.020617168465348546
				-0.000191701999082590
				-0.002158301270572336
				-0.001756320391670191
				-0.014012412123480341
				-0.009051052391717182
				-0.023065981537238787
				-0.005914400772622068
				+0.002526007135014638
				+0.000975588500251955
				];
  termlist = {'U(k-1,1)'; ...
				'U(k-2,1)'; ...
				'U(k-3,1)'; ...
				'U(k-4,1)'; ...
				'U(k-5,1)'; ...
				'U(k-6,1)'; ...
				'U(k-7,1)'; ...
				'U(k-8,1)'; ...
				'U(k-9,1)'; ...
				'U(k-10,1)'; ...
				'U(k-11,1)'; ...
				'U(k-12,1)'; ...
				'U(k-13,1)'; ...
				'U(k-14,1)'; ...
				'U(k-15,1)'; ...
				'U(k-16,1)'; ...
				'U(k-17,1)'; ...
				'U(k-18,1)'; ...
				'U(k-19,1)'; ...
				'U(k-20,1)'; ...
				'U(k-21,1)'; ...
				'U(k-22,1)'; ...
				'U(k-23,1)'; ...
				'U(k-24,1)'; ...
				'U(k-25,1)'; ...
				'U(k-26,1)'; ...
				'U(k-27,1)'; ...
				'U(k-28,1)'; ...
				'U(k-29,1)'; ...
				'U(k-30,1)'; ...
				'U(k-31,1)'; ...
				'U(k-32,1)'; ...
				'U(k-33,1)'; ...
				'U(k-34,1)'; ...
				'U(k-35,1)'; ...
				'U(k-36,1)'; ...
				'U(k-37,1)'; ...
				'U(k-38,1)'; ...
				'U(k-39,1)'; ...
				'U(k-40,1)'; ...
				'U(k-41,1)'; ...
				'U(k-42,1)'; ...
				'U(k-43,1)'; ...
				'U(k-44,1)'; ...
				'U(k-45,1)'; ...
				'U(k-46,1)'; ...
				'U(k-47,1)'; ...
				'U(k-48,1)'; ...
				'U(k-49,1)'; ...
				'U(k-50,1)'; ...
				'U(k-51,1)'; ...
				'U(k-52,1)'; ...
				'U(k-53,1)'; ...
				'U(k-54,1)'; ...
				'U(k-55,1)'; ...
				'U(k-56,1)'; ...
				'U(k-57,1)'; ...
				'U(k-58,1)'; ...
				'U(k-59,1)'; ...
				'U(k-60,1)'; ...
				'U(k-61,1)'; ...
				'U(k-62,1)'; ...
				'U(k-63,1)'; ...
				'U(k-64,1)'; ...
				'U(k-65,1)'; ...
				'U(k-66,1)'; ...
				'U(k-67,1)'; ...
				'U(k-68,1)'; ...
				'U(k-69,1)'; ...
				'U(k-70,1)'; ...
				'U(k-71,1)'; ...
				'U(k-72,1)'; ...
				'U(k-73,1)'; ...
				'U(k-74,1)'; ...
				'U(k-75,1)'; ...
				'U(k-76,1)'; ...
				'U(k-77,1)'; ...
				'U(k-78,1)'; ...
				'U(k-79,1)'; ...
				'U(k-80,1)'; ...
				};
  
  Us = zeros(length(Ys), length(theta));
  M = length(termlist);

  for k = initindex:partialindex
    for m = 1:M
      try
        eval(sprintf('term = %s;', termlist{m}));
      catch
        term = 0;
      end
	  Us(k,:) = term;
	  Y(k) = Y(k) + theta(m)*term;
	  if ~osa
		Ys(k) = Y(k);
	  end
    end    
  end
  
  nprint = 0;
  for k = partialindex+1:N
    if k == partialindex + 1 || ~mod(k, 50) || k == N
      while nprint > 0
        fprintf('\b');
        nprint = nprint - 1;
      end
      nprint = fprintf('Simulation %3d%% completed\n', round(100*k/N));
    end
	Us(k,:) = [U(k-1,1) U(k-2,1) U(k-3,1) U(k-4,1) ...
				U(k-5,1) U(k-6,1) U(k-7,1) U(k-8,1) ...
				U(k-9,1) U(k-10,1) U(k-11,1) U(k-12,1) ...
				U(k-13,1) U(k-14,1) U(k-15,1) U(k-16,1) ...
				U(k-17,1) U(k-18,1) U(k-19,1) U(k-20,1) ...
				U(k-21,1) U(k-22,1) U(k-23,1) U(k-24,1) ...
				U(k-25,1) U(k-26,1) U(k-27,1) U(k-28,1) ...
				U(k-29,1) U(k-30,1) U(k-31,1) U(k-32,1) ...
				U(k-33,1) U(k-34,1) U(k-35,1) U(k-36,1) ...
				U(k-37,1) U(k-38,1) U(k-39,1) U(k-40,1) ...
				U(k-41,1) U(k-42,1) U(k-43,1) U(k-44,1) ...
				U(k-45,1) U(k-46,1) U(k-47,1) U(k-48,1) ...
				U(k-49,1) U(k-50,1) U(k-51,1) U(k-52,1) ...
				U(k-53,1) U(k-54,1) U(k-55,1) U(k-56,1) ...
				U(k-57,1) U(k-58,1) U(k-59,1) U(k-60,1) ...
				U(k-61,1) U(k-62,1) U(k-63,1) U(k-64,1) ...
				U(k-65,1) U(k-66,1) U(k-67,1) U(k-68,1) ...
				U(k-69,1) U(k-70,1) U(k-71,1) U(k-72,1) ...
				U(k-73,1) U(k-74,1) U(k-75,1) U(k-76,1) ...
				U(k-77,1) U(k-78,1) U(k-79,1) U(k-80,1) ...
				];
    Y(k) = Us(k,:)*theta;
	if ~osa
	  Y(k) = Y(k) + E(k);
	  Ys(k) = Y(k);
	end
  end
  
  if nargout > 1
	varargout = {Y, Us, theta};
  else
	varargout = {Y};
  end
end
