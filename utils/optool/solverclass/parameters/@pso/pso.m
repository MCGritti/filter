classdef pso < hgsetget
    
    properties
        Particles=30
        Cognitivity=[1.2 0.4]
        Sociability=[0.4 1.2]
        Inertia=[0.9 0.4];
        TimeStep = 0.45;
        MaxIterations=1000
        MaxEvaluations=[]
        StopCriteria=[]
        Bounded=true
        RefreshRate=100
    end
    
    properties (Hidden)
        Type = 'Solver'
    end
    
    methods
        
        function obj = pso(varargin)
        end
        
        function Config(obj)
            common.configParameters(obj);
        end
        
        function set.Bounded(obj, value)
            if value
                obj.Bounded = true;
            else
                obj.Bounded = false;
            end
        end
        
    end
    
    methods (Static, Hidden)
        function CL = ConfigLayout
            CL.FieldNames = {'Particles', ...
                             'Cognitivity [ C1 ]', ...
                             'Sociability [ C2 ]', ...
                             'Inertia [ W ]', ...
                             'Time step [ t ]', ...
                             'Maximum Iterations', ...
                             'Maximum evaluations', ...
                             'Desired fobj value', ...
                             'Bounded', ...
                             'Refresh rate'};
            CL.HasSugestions = zeros(1,10);
            CL.HasSugestions(9) = 1;
            CL.Sugestions = cell(10,1);
            CL.Sugestions{9} = {'true', 'false'};
        end
        
        function Output = ParameterBoundaries
            Output.Class = {'Integer', ...
                            'Double', ...
                            'Double', ...
                            'Double', ...
                            'Double', ...
                            'Integer', ...
                            'Integer', ...
                            'Double', ...
                            'Logical', ...
                            'Integer'};
            Output.Lower = {3, ...
                            0, ...
                            0, ...
                            0, ...
                            0, ...
                            0, ...
                            0, ...
                            -inf, ...
                            [], ...
                            1};
            Output.Upper = {inf, ...
                            2, ...
                            2, ...
                            1, ...
                            10, ...
                            inf, ...
                            inf, ...
                            inf, ...
                            [], ...
                            inf};
            Output.Size = ones(1,10);
            Output.Size(2:4) = 2;
            Output.Empty = zeros(1,10);
            Output.Empty(7:8) = 1;
        end
    end
    
end

