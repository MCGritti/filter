classdef jade < hgsetget
    
    properties
        PopSize=30
        BestPercentage=0.1
        AdaptativeConstant=0.1
        FIRSize=20
        MaxGenerations=1000
        MaxEvaluations=[]
        StopCriteria=[]
        Bounded=true
        RefreshRate=100
    end
    
    properties (Hidden)
        Type='Solver'
    end
    
    methods
        
        function obj = jade(varargin)
        end
        
        function Config(obj)
            common.configParameters(obj);
        end
        
        function set.Bounded(obj, value)
            if value
                obj.Bounded = true;
            else
                obj.Bounded = false;
            end
        end
        
    end
    
    methods (Static, Hidden)
        function CL = ConfigLayout
            CL.FieldNames = {'Population size', ...
                             'Kbest ( p% )', ...
                             'Adaptative constant ( c )', ...
                             'FIR window size', ...
                             'Maximum generations', ...
                             'Maximum evaluations', ...
                             'Desired fobj value', ...
                             'Bounded', ...
                             'Refresh rate'};
            CL.HasSugestions = zeros(1,9);
            CL.HasSugestions(8) = 1;
            CL.Sugestions = cell(9,1);
            CL.Sugestions{8} = {'true', 'false'};
        end
        
        function Output = ParameterBoundaries
            Output.Class = {'Integer', ...
                            'Double', ...
                            'Double', ...
                            'Integer', ...
                            'Integer', ...
                            'Integer', ...
                            'Double', ...
                            'Logical', ...
                            'Integer'};
            Output.Lower = {3, ...
                            0, ...
                            0, ...
                            0, ...
                            0, ...
                            0, ...
                            -inf, ...
                            [], ...
                            1};
            Output.Upper = {inf, ...
                            1, ...
                            1, ...
                            inf, ...
                            inf, ...
                            inf, ...
                            inf, ...
                            [], ...
                            inf};
            Output.Size = ones(1,9);
            Output.Empty = zeros(1,9);
            Output.Empty(6:7) = 1;
        end
    end
    
end

